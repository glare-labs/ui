//
// Copyright 2023 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

@use 'sass:map';
@use 'sass:string';
@use '../internal/shape' as shape-util;
@use '../internal/validate';
@use '../color';
@use '../elevation';
@use '../shape';
@use '../state';
@use '../typescale';
@use './prototype/prototype-dialog';

$supported-tokens: (
  'container-color',
  'container-shape',
  'container-shape-end-end',
  'container-shape-end-start',
  'container-shape-start-end',
  'container-shape-start-start',
  'headline-color',
  'headline-font',
  'headline-line-height',
  'headline-size',
  'headline-weight',
  'icon-color',
  'icon-size',
  'supporting-text-color',
  'supporting-text-font',
  'supporting-text-line-height',
  'supporting-text-size',
  'supporting-text-weight',
);

$_default: (
  'gu-sys-color': color.values-light(),
  'gu-sys-elevation': elevation.values(),
  'gu-sys-shape': shape.values(),
  'gu-sys-state': state.values(),
  'gu-sys-typescale': typescale.values(),
);

// Note: currently ignoring tokens for `action-*-label-text` and
// `action-*-state-layer` since actions are spec'd as standard text buttons.
$unsupported-tokens: (
  'action-focus-label-text-color',
  'action-focus-state-layer-color',
  'action-focus-state-layer-opacity',
  'action-hover-label-text-color',
  'action-hover-state-layer-color',
  'action-hover-state-layer-opacity',
  'action-label-text-color',
  'action-label-text-font',
  'action-label-text-line-height',
  'action-label-text-size',
  'action-label-text-tracking',
  'action-label-text-type',
  'action-label-text-weight',
  'action-pressed-label-text-color',
  'action-pressed-state-layer-color',
  'action-pressed-state-layer-opacity',
  'container-elevation',
  'headline-tracking',
  'headline-type',
  'supporting-text-tracking',
  'supporting-text-type',
);

@function values($deps: $_default,
  $exclude-hardcoded-values: false,
  $exclude-custom-properties: true) {
  $tokens: prototype-dialog.values($deps, $exclude-hardcoded-values);
  $new-tokens: shape-util.get-new-logical-shape-tokens($tokens, 'container-shape');
  $tokens: validate.values($tokens,
      $supported-tokens: $supported-tokens,
      $unsupported-tokens: $unsupported-tokens,
      $new-tokens: $new-tokens,
      $renamed-tokens: (
      'with-icon-icon-color': 'icon-color',
      'with-icon-icon-size': 'icon-size'
    )
  );

@if not $exclude-custom-properties {
  @each $token, $value in $tokens {
    @if string.index($token, 'container-shape-')==1 {
      // Add fallback to shorthand for logical shape properties.
      $value: var(--gu-dialog-container-shape, #{$value});
    }

    $tokens: map.set($tokens, $token, var(--gu-dialog-#{$token}, #{$value}));
  }
}

@return $tokens;
}
