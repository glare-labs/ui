//
// Copyright 2023 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

@use 'sass:map';
@use 'sass:string';
@use '../internal/shape' as shape-util;
@use '../internal/validate';
@use '../color';
@use '../motion';
@use '../shape';

$supported-tokens: (
  'active-width',
  'color',
  'duration',
  'inward-offset',
  'outward-offset',
  'shape',
  'shape-end-end',
  'shape-end-start',
  'shape-start-end',
  'shape-start-start',
  'width',
);
$_default: (
  'gu-sys-color': color.values-light(),
  'gu-sys-motion': motion.values(),
  'gu-sys-shape': shape.values(),
);

@function values($deps: $_default,
  $exclude-hardcoded-values: false,
  $exclude-custom-properties: true) {
  $tokens: (
    'active-width': if($exclude-hardcoded-values, null, 8px),
    'color': map.get($deps, 'gu-sys-color', 'secondary'),
    'duration': map.get($deps, 'gu-sys-motion', 'duration-long4'),
    'inward-offset': if($exclude-hardcoded-values, null, 0px),
    'outward-offset': if($exclude-hardcoded-values, null, 2px),
    'shape': map.get($deps, 'gu-sys-shape', 'corner-full'),
    'width': if($exclude-hardcoded-values, null, 3px),
  );
$new-tokens: shape-util.get-new-logical-shape-tokens($tokens, 'shape');
$tokens: validate.values($tokens,
    $supported-tokens: $supported-tokens,
    $new-tokens: $new-tokens );

@if not $exclude-custom-properties {
  @each $token, $value in $tokens {
    @if string.index($token, 'shape-')==1 {
      $value: var(--gu-focus-ring-shape, #{$value});
    }

    $tokens: map.set($tokens,
        $token,
        var(--gu-focus-ring-#{$token}, #{$value}));
  }
}

@return $tokens;
}
