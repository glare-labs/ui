@use 'sass:list';
@use 'sass:map';
@use '../../internal/validate.scss';
@use '../../color';
@use '../../elevation';

$supported-tokens: (
    'level',
    'shadow-color'
);

$_default-theme: (
    'gu-sys-color': color.values-light(),
    'gu-sys-elevation': elevation.values(),
);

@function values($deps: $_default-theme, $hardcoded: true, $exclude-custom-properties: false) {
    $tokens: (
        'level': map.get($deps, 'gu-sys-elevation', 'level-0'),
        'shadow-color': map.get($deps, 'gu-sys-color', 'shadow')
    );

@if not $exclude-custom-properties {
    @each $token, $value in $tokens {
        $tokens: map.set($tokens,
                $token,
                var(--gu-elevation-#{$token}, #{$value}));
    }
}

@return validate.values($tokens, $supported-tokens: $supported-tokens);
}

// Implement

@mixin theme($tokens) {
    $supported-tokens: $supported-tokens;

    @each $token, $value in $tokens {
        @if list.index($supported-tokens, $token)==null {
            @error 'Token `#{$token}` is not a supported token.';
        }

        @if $value {
            --gu-elevation-#{$token}: #{$value};
        }
    }
}

@mixin styles() {
    $tokens: values($exclude-custom-properties: false);

    .elevation {
        @each $token, $value in $tokens {
            --_#{$token}: #{$value};
        }

    }

    .elevation {
        border-radius: inherit;
        inset: 0;
        position: absolute;
        transition-duration: inherit;
        transition-property: inherit;
        transition-timing-function: inherit;
        pointer-events: none;

        &::before {
            content: "";
            inset: 0;
            border-radius: inherit;
            position: absolute;
            transition-duration: inherit;
            transition-timing-function: inherit;
            transition-property: box-shadow, opacity;
            opacity: 0.3;

            --l1-y: clamp(0, var(--_level), 1);
            --l4-y: clamp(0, var(--_level) - 3, 1);
            --l5-y: calc(2 * clamp(0, var(--_level) - 4, 1));
            --y: calc(1px * (var(--l1-y) + var(--l4-y) + var(--l5-y)));

            --l1-blur: calc(2 * clamp(0, var(--_level), 1));
            --l3-blur: clamp(0, var(--_level) - 2, 1);
            --l5-blur: clamp(0, var(--_level) - 4, 1);
            --blur: calc(1px * (var(--l1-blur) + var(--l3-blur) + var(--l5-blur)));

            box-shadow: 0px var(--y) var(--blur) 0px var(--_shadow-color);
        }

        &::after {
            content: "";
            border-radius: inherit;
            inset: 0;
            position: absolute;
            transition-duration: inherit;
            transition-timing-function: inherit;
            transition-property: box-shadow, opacity;
            opacity: 0.15;

            --l1-y: clamp(0, var(--_level), 1);
            --l2-y: clamp(0, var(--_level) - 1, 1);
            --l3to5-y: calc(2 * clamp(0, var(--_level) - 2, 3));
            --y: calc(1px * (var(--l1-y) + var(--l2-y) + var(--l3to5-y)));

            --l1to2-blur: calc(3 * clamp(0, var(--_level), 2));
            --l3to5-blur: calc(2 * clamp(0, var(--_level) - 2, 3));
            --blur: calc(1px * (var(--l1to2-blur) + var(--l3to5-blur)));

            --l1to4-spread: clamp(0, var(--_level), 4);
            --l5-spread: calc(2 * clamp(0, var(--_level) - 4, 1));
            --spread: calc(1px * (var(--l1to4-spread) + var(--l5-spread)));

            box-shadow: 0px var(--y) var(--blur) var(--spread) var(--_shadow-color);
        }

        &.level-0 {
            --_level: 0;
        }

        &.level-1 {
            --_level: 1;
        }

        &.level-2 {
            --_level: 2;
        }

        &.level-3 {
            --_level: 3;
        }

        &.level-4 {
            --_level: 4;
        }

        &.level-5 {
            --_level: 5;
        }
    }

}
