//
// Copyright 2023 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

@use 'sass:map';
@use 'sass:string';
@use '../internal/shape' as shape-util;
@use '../internal/validate';
@use '../color';
@use '../elevation';
@use '../shape';
@use '../state';
@use '../typescale';
@use './prototype/prototype-filled-tonal-button';

$supported-tokens: (
  'container-color',
  'container-elevation',
  'container-height',
  'container-shadow-color',
  'container-shape',
  'container-shape-end-end',
  'container-shape-end-start',
  'container-shape-start-end',
  'container-shape-start-start',
  'disabled-container-color',
  'disabled-container-elevation',
  'disabled-container-opacity',
  'disabled-icon-color',
  'disabled-icon-opacity',
  'disabled-label-text-color',
  'disabled-label-text-opacity',
  'focus-container-elevation',
  'focus-icon-color',
  'focus-label-text-color',
  'hover-container-elevation',
  'hover-icon-color',
  'hover-label-text-color',
  'hover-state-layer-color',
  'hover-state-layer-opacity',
  'icon-color',
  'icon-size',
  'label-text-color',
  'label-text-font',
  'label-text-line-height',
  'label-text-size',
  'label-text-weight',
  'leading-space',
  'pressed-container-elevation',
  'pressed-icon-color',
  'pressed-label-text-color',
  'pressed-state-layer-color',
  'pressed-state-layer-opacity',
  'trailing-space',
  'with-leading-icon-leading-space',
  'with-leading-icon-trailing-space',
  'with-trailing-icon-leading-space',
  'with-trailing-icon-trailing-space',
);

$unsupported-tokens: (
  'focus-state-layer-color',
  'focus-state-layer-opacity',
  'label-text-tracking',
  'label-text-type',
);

$_default: (
  'gu-sys-color': color.values-light(),
  'gu-sys-elevation': elevation.values(),
  'gu-sys-shape': shape.values(),
  'gu-sys-state': state.values(),
  'gu-sys-typescale': typescale.values(),
);

@function values($deps: $_default,
  $exclude-hardcoded-values: false,
  $exclude-custom-properties: true) {
  $tokens: prototype-filled-tonal-button.values($deps, $exclude-hardcoded-values);
  $new-tokens: map.merge(shape-util.get-new-logical-shape-tokens($tokens, 'container-shape'),
      ('leading-space': if($exclude-hardcoded-values, null, 24px),
        'trailing-space': if($exclude-hardcoded-values, null, 24px),
        'with-leading-icon-leading-space': if($exclude-hardcoded-values, null, 16px),
        'with-leading-icon-trailing-space': if($exclude-hardcoded-values, null, 24px),
        'with-trailing-icon-leading-space': if($exclude-hardcoded-values, null, 24px),
        'with-trailing-icon-trailing-space': if($exclude-hardcoded-values, null, 16px),
      ));

  $tokens: validate.values($tokens,
      $supported-tokens: $supported-tokens,
      $unsupported-tokens: $unsupported-tokens,
      $new-tokens: $new-tokens,
      $renamed-tokens: (
      'with-icon-disabled-icon-color': 'disabled-icon-color',
      'with-icon-disabled-icon-opacity': 'disabled-icon-opacity',
      'with-icon-focus-icon-color': 'focus-icon-color',
      'with-icon-hover-icon-color': 'hover-icon-color',
      'with-icon-icon-color': 'icon-color',
      'with-icon-icon-size': 'icon-size',
      'with-icon-pressed-icon-color': 'pressed-icon-color'
    )
  );

@if not $exclude-custom-properties {
  @each $token, $value in $tokens {
    @if string.index($token, 'container-shape-')==1 {
      $value: var(--gu-filled-tonal-button-container-shape, #{$value});
    }

    $tokens: map.set($tokens,
        $token,
        var(--gu-filled-tonal-button-#{$token}, #{$value}));
  }
}

@return $tokens;
}
