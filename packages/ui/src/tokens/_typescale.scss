//
// Copyright 2023 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

@use 'sass:map';
@use './internal/validate.scss';
@use './prototype/typeface';
@use './prototype/typescale';

$supported-tokens: (
    'body-large-font',
    'body-large-line-height',
    'body-large-size',
    'body-large-weight',
    'title-small-tracking',
    'body-medium-font',
    'body-medium-line-height',
    'body-medium-size',
    'body-medium-weight',
    'title-medium-tracking',
    'body-small-font',
    'body-small-line-height',
    'body-small-size',
    'body-small-weight',
    'title-large-tracking',
    'display-large-font',
    'display-large-line-height',
    'display-large-size',
    'display-large-weight',
    'label-small-tracking',
    'display-medium-font',
    'display-medium-line-height',
    'display-medium-size',
    'display-medium-weight',
    'label-medium-tracking',
    'display-small-font',
    'display-small-line-height',
    'display-small-size',
    'display-small-weight',
    'label-large-tracking',
    'headline-large-font',
    'headline-large-line-height',
    'headline-large-size',
    'headline-large-weight',
    'headline-small-tracking',
    'headline-medium-font',
    'headline-medium-line-height',
    'headline-medium-size',
    'headline-medium-weight',
    'headline-medium-tracking',
    'headline-small-font',
    'headline-small-line-height',
    'headline-small-size',
    'headline-small-weight',
    'headline-large-tracking',
    'label-large-font',
    'label-large-line-height',
    'label-large-size',
    'label-large-weight',
    'display-small-tracking',
    'label-large-weight-prominent',
    'label-medium-font',
    'label-medium-line-height',
    'label-medium-size',
    'label-medium-weight',
    'display-medium-tracking',
    'label-medium-weight-prominent',
    'label-small-font',
    'label-small-line-height',
    'label-small-size',
    'label-small-weight',
    'display-large-tracking',
    'title-large-font',
    'title-large-line-height',
    'title-large-size',
    'title-large-weight',
    'body-small-tracking',
    'title-medium-font',
    'title-medium-line-height',
    'title-medium-size',
    'title-medium-weight',
    'body-medium-tracking',
    'title-small-font',
    'title-small-line-height',
    'title-small-size',
    'title-small-weight',
    'body-large-tracking',
);

$unsupported-tokens: (
    'body-large',
    'body-medium',
    'body-small',
    'display-large',
    'display-medium',
    'display-small',
    'headline-large',
    'headline-medium',
    'headline-small',
    'label-large',
    'label-medium',
    'label-small',
    'title-large',
    'title-medium',
    'title-small',
);

$_default: (
    'gu-ref-typeface': typeface.values(),
);

@function values($deps: $_default,
    $exclude-hardcoded-values: false,
    $exclude-custom-properties: false) {
    $tokens: typescale.values($deps,
            $exclude-hardcoded-values: $exclude-hardcoded-values );

    @if not $exclude-custom-properties {
        @each $token, $value in $tokens {
            @if $value !=null {
                $tokens: map.set($tokens,
                        $token,
                        var(--gu-sys-typescale-#{$token}, #{$value}));
            }
        }
    }

    @return validate.values($tokens,
        $supported-tokens: $supported-tokens,
        $unsupported-tokens: $unsupported-tokens );
}
